use std::mem::size_of;

#[derive(Debug, Clone, Copy)]
pub struct Placeholder {
    pos: u32,
}

#[derive(Default)]
pub struct Bytecode {
    pub bytes: Vec<u8>,
}

impl Bytecode {
    /// Returns the instructions count
    pub fn len(&self) -> usize {
        self.bytes.len()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn emit_int(&mut self, constant: i64) {
        self.bytes.extend(constant.to_be_bytes());
    }

    pub fn emit_byte(&mut self, constant: u8) {
        self.bytes.push(constant);
    }

    pub fn emit_u32(&mut self, constant: u32) {
        self.bytes.extend(constant.to_be_bytes());
    }

    pub fn emit_float(&mut self, constant: f64) {
        self.bytes.extend(constant.to_be_bytes());
    }

    pub fn emit_constant_ref(&mut self, constant: u32) {
        self.emit_u32(constant);
    }

    pub fn extend(&mut self, bytecode: Bytecode) {
        self.bytes.extend(bytecode.bytes);
    }

    /// Fills an instruction pointer at given instruction pointer in the byte array
    pub fn patch_u32_placeholder(&mut self, placeholder: Placeholder, value: u32) {
        let pos = placeholder.pos as usize;
        self.bytes[pos..pos + size_of::<u32>()].copy_from_slice(&value.to_be_bytes())
    }

    /// expands the byte vector to let a placeholder of the given size,
    /// returning the position of the placeholder in the vector
    pub fn emit_u32_placeholder(&mut self) -> Placeholder {
        let pos = self.bytes.len();
        self.bytes.resize(pos + size_of::<u32>(), 0);
        Placeholder { pos: pos as u32 }
    }
}

/// Holds the currently generated bytecode.
///
/// While the bytecode simply consists of a sequence of instructions, this struct provides
/// methods to emit the correct instructions for multi-byte values.
pub struct Instructions<'a> {
    pub bytecode: &'a mut Bytecode,
}

impl<'a> Instructions<'a> {
    pub fn wrap(bytecode: &'a mut Bytecode) -> Self {
        Self { bytecode }
    }

    pub fn emit_code(&mut self, code: Opcode) {
        self.bytecode.emit_byte(code as u8)
    }

    pub fn emit_get_local(&mut self, identifier: u8) {
        self.emit_code(Opcode::GetLocal);
        self.bytecode.emit_byte(identifier);
    }

    pub fn emit_push_int(&mut self, constant: i64) {
        self.emit_code(Opcode::PushInt);
        self.bytecode.emit_int(constant);
    }

    pub fn emit_push_byte(&mut self, constant: u8) {
        self.emit_code(Opcode::PushByte);
        self.bytecode.emit_byte(constant);
    }

    pub fn emit_push_float(&mut self, constant: f64) {
        self.emit_code(Opcode::PushFloat);
        self.bytecode.emit_float(constant);
    }

    pub fn emit_push_string_constant(&mut self, constant_ref: u32) {
        self.emit_code(Opcode::PushString);
        self.bytecode.emit_constant_ref(constant_ref);
    }

    pub fn emit_instruction_pointer(&mut self, ip: u32) {
        self.bytecode.emit_constant_ref(ip);
    }

    /// Emits a jump instruction.
    ///
    /// It returns the index of the offset which is to be patched.
    #[must_use = "the jump address must be patched later"]
    pub fn emit_jump(&mut self, opcode: Opcode) -> Placeholder {
        self.emit_code(opcode);
        self.bytecode.emit_u32_placeholder()
    }

    /// Takes the index of the jump offset to be patched as input, and patches
    /// it to point to the current instruction.
    pub fn patch_jump(&mut self, offset_idx: Placeholder) {
        let ip = self.current_ip();
        self.bytecode.patch_u32_placeholder(offset_idx, ip);
    }

    /// Emits a jump instruction to the given instruction pointer.
    pub fn jump_back_to(&mut self, start_idx: u32) {
        self.emit_code(Opcode::Jump);
        self.emit_instruction_pointer(start_idx);
    }

    /// Returns the current instruction pointer
    pub fn current_ip(&self) -> u32 {
        self.bytecode.len() as u32
    }
}

/// see vm's `Opcode` enum for more details
#[repr(u8)]
pub enum Opcode {
    PushInt,
    PushByte,
    PushFloat,
    PushString,
    GetLocal,
    SetLocal,

    Spawn,
    Invoke,

    PopByte,
    PopQWord,

    IfJump,
    IfNotJump,
    Jump,

    ConvertIntToStr,
    ConvertFloatToStr,
    ConvertIntToByte,
    Concat,

    BXor,
    IntAdd,
    IntSub,
    IntMul,
    IntDiv,
    IntMod,
}
