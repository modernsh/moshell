use crate::r#type::ValueStackSize;
use analyzer::relations::LocalId;
use std::mem::size_of;

/// Holds the currently generated bytecode.
///
/// While the bytecode simply consists of a sequence of bytes, this struct provides
/// methods to emit the correct instructions for multi-byte values.
#[derive(Default)]
pub struct Bytecode {
    pub bytes: Vec<u8>,
}

impl Bytecode {
    /// Returns the bytes count
    pub fn len(&self) -> usize {
        self.bytes.len()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn emit_code(&mut self, code: Opcode) {
        self.bytes.push(code as u8);
    }

    /// emits instructions to assign given local identifier with last operand stack value
    /// assuming the local's size is the given `size` argument
    pub fn emit_set_local(&mut self, identifier: LocalId, size: ValueStackSize) {
        let opcode = match size {
            ValueStackSize::Byte => Opcode::SetByte,
            ValueStackSize::QWord => Opcode::SetQWord,
            ValueStackSize::Reference => Opcode::SetRef,
            ValueStackSize::Zero => panic!("set_local for value whose type is zero-sized"),
        };
        self.emit_code(opcode);
        self.bytes.push(identifier.0 as u8);
    }

    /// emits instructions to push to operand stack given local identifier
    /// assuming the local's size is the given `size` argument
    pub fn emit_get_local(&mut self, identifier: LocalId, size: ValueStackSize) {
        let opcode = match size {
            ValueStackSize::Byte => Opcode::GetByte,
            ValueStackSize::QWord => Opcode::GetQWord,
            ValueStackSize::Reference => Opcode::GetRef,
            ValueStackSize::Zero => panic!("get_local for value whose type is zero-sized"),
        };
        self.emit_code(opcode);
        self.bytes.push(identifier.0 as u8);
    }

    pub fn emit_int(&mut self, constant: i64) {
        self.emit_code(Opcode::PushInt);
        self.bytes.extend(constant.to_be_bytes());
    }

    pub fn emit_byte(&mut self, constant: u8) {
        self.emit_code(Opcode::PushByte);
        self.bytes.push(constant);
    }

    pub fn emit_float(&mut self, constant: f64) {
        self.emit_code(Opcode::PushFloat);
        self.bytes.extend(constant.to_be_bytes());
    }

    pub fn emit_string_constant_ref(&mut self, constant_ref: u32) {
        self.emit_code(Opcode::PushString);
        self.bytes.extend(constant_ref.to_be_bytes());
    }

    pub fn emit_instruction_pointer(&mut self, ip: usize) {
        self.bytes.extend(ip.to_be_bytes());
    }

    /// Inverts the boolean value on top of the stack.
    pub fn invert_bool(&mut self) {
        self.emit_byte(1);
        self.emit_code(Opcode::BXor);
    }

    /// expands the byte vector to let a placeholder of the given size,
    /// returning the position of the placeholder in the vector
    pub fn create_placeholder(&mut self, placeholder_size: usize) -> usize {
        let pos = self.bytes.len();
        self.bytes.resize(pos + placeholder_size, 0);
        pos
    }

    /// Emits a jump instruction.
    ///
    /// It returns the index of the offset which is to be patched.
    #[must_use = "the jump address must be patched later"]
    pub fn emit_jump(&mut self, opcode: Opcode) -> usize {
        self.emit_code(opcode);
        self.create_placeholder(size_of::<usize>())
    }

    /// Takes the index of the jump offset to be patched as input, and patches
    /// it to point to the current instruction.
    pub fn patch_jump(&mut self, offset_idx: usize) {
        let ip = self.len();
        self.fill_in_ip(offset_idx, ip);
    }

    /// Emits a jump instruction to the given instruction pointer.
    pub fn jump_back_to(&mut self, start_idx: usize) {
        self.emit_code(Opcode::Jump);
        self.emit_instruction_pointer(start_idx);
    }

    pub fn extend(&mut self, bytecode: Bytecode) {
        self.bytes.extend(bytecode.bytes);
    }

    /// Fills an instruction pointer at given instruction pointer in the byte array
    pub fn fill_in_ip(&mut self, ip_dest: usize, ip: usize) {
        self.bytes[ip_dest..ip_dest + size_of::<usize>()].copy_from_slice(&ip.to_be_bytes())
    }

    /// Returns the current instruction pointer
    pub fn current_ip(&self) -> usize {
        self.len()
    }
}

/// see vm's `Opcode` enum for more details
#[repr(u8)]
pub enum Opcode {
    PushInt,
    PushByte,
    PushFloat,
    PushString,
    GetByte,
    SetByte,
    GetQWord,
    SetQWord,
    GetRef,
    SetRef,

    Spawn,

    PopByte,
    PopQWord,

    IfJump,
    IfNotJump,
    Jump,

    ConvertByteToInt,
    ConvertIntToStr,
    ConvertFloatToStr,
    ConvertIntToByte,
    Concat,

    BXor,
    IntAdd,
    IntSub,
    IntMul,
    IntDiv,
    IntMod,
    FloatAdd,
    FloatSub,
    FloatMul,
    FloatDiv,

    StringEqual,
    IntEqual,
    IntLessThan,
    IntLessOrEqual,
    IntGreaterThan,
    IntGreaterOrEqual,
    FloatEqual,
    FloatLessThan,
    FloatLessOrEqual,
    FloatGreaterThan,
    FloatGreaterOrEqual,
}
