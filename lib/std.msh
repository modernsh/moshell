use reef::std::convert
use reef::std::memory


/// Causes the runtime to panic, with the specified message.
/// This also prints the current callstack trace.
/// Once executed the process will exit with code 1.
/// @param message the cause of the panic
fun panic(message: String) -> Nothing;

/// Exits the current process with the given exitcode.
/// @param code program's exitcode
fun exit(code: Exitcode) -> Nothing;

/// @returns string value of given environment variable
fun env(name: String) -> Option[String];

/// Set or override a given environment variable with given string value.
/// @param name the targeted environment variable name.
/// @param value the new value of targeted variable.
fun set_env(name: String, value: String);

/// Reads a single line from the standard input.
///
/// If the input is closed, an empty string is returned.
fun read_line() -> String;

/// Aborts runtime.
/// Prints given message to stderr and then exit with exitcode 1.
/// Unlike [[reef::std::panic]], this function does not print the callstack trace.
fun abort(message: String) -> Nothing = {
    echo $message >&2
    exit(convert::to_exitcode(1))
}


/// Instantiate a new empty vector of A
fun new_vec[A]() -> Vec[A];

/// Instantiate an option with some value
fun some[A](v: A) -> Option[A];

/// Instantiate a None option
// TODO make Option's generic parameter (`A`) covariant to return an Option[Nothing]
fun none[A]() -> Option[A];